\documentclass[11pt,draft]{article}
\usepackage{noweb,amsmath,amsthm,amssymb,microtype,eco,ragged2e,url}
\usepackage[round]{natbib}
\usepackage[margin = 1in]{geometry}
\newcommand{\addsection}[1]{\addcontentsline{toc}{section}{#1}\section*{#1}}
\newcommand{\addsubsection}[1]{\addcontentsline{toc}{subsection}{#1}\subsection*{#1}}

\frenchspacing
\RaggedRight
\noweboptions{longxref}
\DisableLigatures{family=tt*}

\title{Implementation details of the `dbframe'
  package\footnote{Copyright \textcopyright\ 2011 by Gray Calhoun}}
\date{\today}
\author{Gray Calhoun}

\bibliographystyle{abbrvnat}
\begin{document}

\maketitle
\tableofcontents

\section{Queries}
This package is useful only insofar as it provides convenient, R-like
wrappers for database queries.  Some of them aren't implemented yet,
but the ones that I use frequently are.

\subsection{Insert}
The [[insert]] query works like this:
<<command line>>=
> insert(dbframe_object) <- data_frame
@

<<insert.R>>=
setGeneric("insert<-", function(x,..., value) standardGeneric("insert<-"))
setMethod("insert<-", signature = "dbframe", function(x,...,value) {
  dbc <- dbConnect(x)
  cols <- if (dbExistsTable(dbc, sql(x))) {
    tablenames <- names(select(x, limit = 0))
    tablenames[tablenames %in% names(value)]
  } else {
    names(value)
  }
  dbWriteTable(dbc, sql(x), value[, cols, drop=FALSE],
               row.names = FALSE, overwrite = FALSE, append = TRUE,...)
  dbDisconnect(dbc)
  x
}
@ %def insert "insert<-"

\subsection{Select}

\section{Other functions}

\subsection{Publication quality tables}

In my research, I usually collect simulation results in the table of
some database.  Summarizing the results then amounts to running a
query to aggregate that data, and then plot or tabulate that query's
ersults.  The [[publictable]] function does this and formats the table
to look nice in Latex, using Latex's ``booktabs'' package and the
[[xtable]] library \citep{Dah:09}.  These methods are primarily
documented in the help files.

<<publictable.R>>=
setGeneric("publictable", function(object,...) standardGeneric("publictable"))

setMethod("publictable", signature = c("data.frame"),
          function(object,...) dftable(object,...))

setMethod("publictable", signature = c("dbframe"),
          function(object,...) {
            arguments <- list(...)
            arguments$dframe <- do.call("select", c(x = object, arguments))
            do.call("dftable", arguments)
          })
@ %def publictable
Typesetting the table is done by [[dftable]].  The first argument,
[[dframe]] is a data frame; it is converted to Latex code by
[[xtable]] and then the Latex code is tweaked to look better.
<<publictable.R>>=
dftable <- function(dframe, align, digits, numberformat = align %in% c("c", "C"),
                    tabular.environment = "tabularx", include.rownames = FALSE,
                    sanitize.text.function = function(x) x, drop = NULL,...) {

  if (!is.null(drop)) dframe <- dframe[,setdiff(names(dframe), drop)]
  dframe[,numberformat] <- lapply(numberformat, function(f) aligndecimals(f))
  
  gsub(sprintf("\\\\begin\\{%s\\}", tabular.environment),
       sprintf("\\\\begin\\{%s\\}\\{\\\\textwidth\\}", tabular.environment),
       print(xtable(dframe, align = align, digits = digits,...),
             file = "/dev/null", floating = FALSE,
             add.to.row = list(pos=list(-1, 0, nrow(dframe)),
               command = c("\\toprule", "\\midrule", "\\bottomrule")),
             tabular.environment = tabular.environment,
             sanitize.text.function = sanitize.text.function,
             include.rownames = include.rownames))
}
@ %def dftable

The next function, [[aligndecimals]], pads the left side of a vector
of numbers so that, when the vector is presented as a centered column
in Latex, the decimals are vertically aligned.  It also converts
dashes to minus signs and puts the numbers in math mode to turn off
old-style numbering.
<<publictable.R>>=
### -*- mode: R -*-
aligndecimals <- function(x, rnd=1)
  gsub("-", "\\\\!\\\\!-", sprintf("$%s$", gsub(" ", "\\\\enskip", 
                                                format(round(x, rnd)))))
@


\appendix
\addsection{Appendix}\setcounter{section}{1}

\subsection{The dbframe class}
This package exists mainly to introduce the [[dbframe]] object as an
alternative to the data frame and to provide methods for querying and
manipulating these objects.  This appendix defines the [[dbframe]]
class as well as basic methods for working with it.  Please see the
help pages for details.
<<dbframe-class.R>>=
setClass("dbframe", representation(db = "character", sql = "character",
                                   extensions = "logical"))

setMethod("==", c("dbframe", "dbframe"), function(e1, e2)
          e1@db == e2@db & e1@sql == e2@sql & e1@extensions == e2@extensions)
setMethod("!=", c("dbframe", "dbframe"), function(e1, e2)
          e1@db != e2@db & e1@sql != e2@sql & e1@extensions != e2@extensions)

setGeneric("sql", function(x) standardGeneric("sql"))
setGeneric("db", function(x) standardGeneric("db"))
setGeneric("extensions", function(x) standardGeneric("extensions"))

setMethod("sql", signature = c("dbframe"), function(x) x@sql)
setMethod("db", signature = c("dbframe"), function(x) x@db)
setMethod("extensions", signature = c("dbframe"), function(x) x@extensions)
@ %def db dbframe extensions sql

<<dbframe.R>>=
dbframe <- function(table, dbname, data = NULL, extensions = TRUE,...) {
  x <- new("dbframe", db = dbname, sql = table, extensions = extensions)
  if (!is.null(data)) insert(x) <- as.data.frame(data)
  return(x)
}
@ %def dbframe

\subsection{Namespace}

<<NAMESPACE>>=
import(DBI, RSQLite, RSQLite.extfuns, xtable)
importFrom(utils, head, tail)
importFrom(xtable, xtable)
export(clear, db, dbframe, dfapply, extensions, index, 'index<-', 'insert<-', 
       pdfapply, publictable, rows, select, sql)
exportClass(dbframe)
exportMethods(dbConnect, "==", "!=")
S3method(head, dbframe)
S3method(tail, dbframe)
@ %def xtable

\subsection{Licensing information for this software}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
\textsc{without any warranty}; without even the implied warranty of
\textsc{merchantability} or \textsc{fitness for a particular purpose}.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see
\texttt{<http://www.gnu.org/licenses/>}.

\addsection{Index}
\addsubsection{Functions and variables}\nowebindex
\addsubsection{Code chunks and files}\nowebchunks

\bibliography{AllRefs}
\end{document}
