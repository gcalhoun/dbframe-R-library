% -*- mode: noweb; noweb-default-code-mode: R-mode -*-
\name{select}
\alias{select}
\alias{select-methods}
\alias{select,dbframe,character-method}
\alias{select,dbframe,list-method}
\alias{select,dbframe,missing-method}
\alias{select,list,character-method}
\alias{generate.select.sql}
\title{Retrieve records from a dbframe}
\description{Does it.}

\usage{
generate.select.sql(tablesql, cols = "*", where = NULL, group.by = NULL, having = NULL, order.by = NULL, limit = NULL, ...)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{tablesql}{
%%     ~~Describe \code{tablesql} here~~
}
  \item{cols}{
%%     ~~Describe \code{cols} here~~
}
  \item{where}{
%%     ~~Describe \code{where} here~~
}
  \item{group.by}{
%%     ~~Describe \code{group.by} here~~
}
  \item{having}{
%%     ~~Describe \code{having} here~~
}
  \item{order.by}{
%%     ~~Describe \code{order.by} here~~
}
  \item{limit}{
%%     ~~Describe \code{limit} here~~
}
  \item{\dots}{
%%     ~~Describe \code{\dots} here~~
}
}


\section{Implementation}{
<<*>>=
<<Define the function that writes SQL commands>>
setGeneric("select", function(x, cols, ...) standardGeneric("select"))
setMethod("select", signature = c("dbframe", "missing"), function(x, cols,...) {
          <<Execute select for c("dbframe", "missing")>>})
setMethod("select", signature = c("dbframe", "character"), function(x, cols,...) {
          <<Execute select for c("dbframe", "character")>>})
@

<<Define the function that writes SQL commands>>=
generate.select.sql <- function(tablesql, cols = "*", where = NULL, group.by = NULL,
                      having = NULL, order.by = NULL, limit = NULL, ...) {
  <<Write the "select" part of the statement>>
  <<Write the "group by" part of the statement>>
  <<Write the "order by" part of the statement>>
  <<Write the "having" part of the statement>>
  <<Write the "where" part of the statement>>
  <<Write the "limit" part of the statement>>
  return(paste("select", cols, "from", tablesql, where, 
               group.by, having, order.by, limit))
}
@  

Original comments:

add elements of the 'group.by' vector that aren't already in cols to
the select statement.  The sapply part looks for group.by elements
that are at the beginning of a select statement, so that it recognizes
things like: cols = "m.s as THEs", group.by = "m.s"
<<Write the "select" part of the statement>>=
if ((length(cols) == 1) && (nchar(cols) == 0)) cols <- NULL
cols <- if (is.null(group.by)) {
  paste(cols, collapse = ", ")
} else {
  paste(c(group.by[!sapply(group.by, function(g)
                           g %in% substr(cols, 1, nchar(g)))], cols),
        collapse = ", ")
}
@ 

<<Write the "group by" part of the statement>>=
group.by <- 
  if (is.null(group.by)) {
    "" 
  } else {
    paste("group by", paste(group.by, collapse = ", "))
  }
@ 

<<Write the "order by" part of the statement>>=
order.by <- if (is.null(order.by)) "" else {
  paste("order by", paste(order.by, collapse = ", "))
}
@ 

<<Write the "having" part of the statement>>=
having   <- if (is.null(having)) "" else paste("having", having)
@ 

<<Write the "where" part of the statement>>=
where    <- if (is.null(where)) "" else paste("where", where)
@ 

<<Write the "limit" part of the statement>>=
limit    <- if (is.null(limit)) "" else paste("limit", limit)
@ 

<<Execute select for c("dbframe", "missing")>>=
dbc <- dbConnect(x)
d <- dbGetQuery(dbc, generate.select.sql(sql(x),...))
dbDisconnect(dbc)
return(d)
@ 

<<Execute select for c("dbframe", "character")>>=
dbc <- dbConnect(x)
d <- dbGetQuery(dbc, generate.select.sql(sql(x), cols, ...))
dbDisconnect(dbc)
return(d)
@
}
\keyword{methods}
\keyword{database}
