\name{clear}
\alias{clear}
\title{Clear a table}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
clear(..., delete = TRUE, deparse.level = 1)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{\dots}{
%%     ~~Describe \code{\dots} here~~
}
  \item{delete}{
%%     ~~Describe \code{delete} here~~
}
  \item{deparse.level}{
%%     ~~Describe \code{deparse.level} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}

\author{Gray Calhoun \email{gcalhoun@iastate.edu}}

\section{Implementation}{
<<*>>=
setMethod("clear", signature = "dbframe", function(..., delete = TRUE,
                     deparse.level = 1) {
  x <- list(...)
  if (!all(sapply(x, function(y) is(y, "dbframe")))) stop("All arguments must be dbframes")
  sapply(x, function(y) {
    dbc <- dbConnect(y)
    ## remove the table from the corresponding database if it's there
    res <- if (sql(y) %in% dbListTables(dbc)) {
      dbRemoveTable(dbc, sql(y),...)
    } else {
      FALSE
    }
    dbDisconnect(dbc)
    ## I'd like to add code to remove the variable from the
    ## environment where 'clear' was called
    
    ## if (delete) remove(y, environment = sys.parent(2))
    res
  })
})
@  
}

\seealso{\code{\link{clear-methods}}}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.
}
\keyword{database}
